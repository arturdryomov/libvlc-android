buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:1.1.3"
        classpath "com.jakewharton.sdkmanager:gradle-plugin:0.12.0"
    }
}

apply plugin: "android-sdk-manager"
apply plugin: "android-library"
apply plugin: "maven"

android {
    compileSdkVersion 22
    buildToolsVersion "22"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22
    }
}

task cloneSdk << {
    exec {
        commandLine "git", "clone", "git://git.videolan.org/vlc-ports/android.git", "vlc-android"
    }
    exec {
        workingDir file("vlc-android")
        commandLine "git", "checkout", readSdkProperty("version.vlc.android")
    }
    exec {
        workingDir file("vlc-android")
        commandLine "git", "clone", "git://git.videolan.org/vlc.git", "vlc"
    }
    exec {
        workingDir file("vlc-android/vlc")
        commandLine "git", "checkout", readSdkProperty("version.vlc")
    }
    exec {
        workingDir file("vlc-android/vlc")
        commandLine "git", "apply", "--index", file("patch/always-read-avi-index.patch").path
    }
}

cloneSdk.onlyIf {
    !file("vlc-android").exists() && !file("vlc-android/vlc").exists()
}

task compileSdk(dependsOn: cloneSdk) << {
    exec {
        workingDir file("vlc-android")
        commandLine "sh", "compile-libvlc.sh", "--release"
    }
}

task buildSdk(dependsOn: compileSdk) << {
    copy {
        from "vlc-android/libvlc/jni/libs"
        into "src/main/jniLibs"
    }
    copy {
        from "vlc-android/libvlc/src"
        into "src/main/java"
    }
}

def readMavenProperty(property) {
    return readProperty("maven.properties", property)
}

def readSdkProperty(property) {
    return readProperty("sdk.properties", property)
}

def readProperty(propertiesFileName, property) {
    def propertiesFile = file(propertiesFileName)
    def properties = new Properties()

    properties.load(propertiesFile.newInputStream())

    return properties[property]
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository url: "file://${mavenLocalPath()}"

            pom {
                groupId = readMavenProperty("pom.group")
                artifactId = readMavenProperty("pom.artifact")
                version = readMavenProperty("pom.version")
            }
        }
    }
}

def mavenLocalPath() {
    def homePath = System.getProperty("user.home")
    def mavenPath = ".m2/repository"

    return new File(homePath, mavenPath).absolutePath
}

task generateWrapper(type: Wrapper) {
    description "Generates Gradle wrapper."

    gradleVersion = "2.3"
}
